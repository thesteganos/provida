# config.yaml
# Arquivo de Configuração Central para o Projeto Pró-Vida

# 1. Configuração do Provedor de LLM
llm_provider: google

# 2. Alocação Estratégica de Modelos
models:
  planning_agent: 'gemini-2.5-pro'
  analysis_agent: 'gemini-2.5-pro'
  synthesis_agent: 'gemini-2.5-pro'
  rag_query_agent: 'gemini-2.5-flash'
  chat_agent: 'gemini-2.5-flash'
  translation_agent: 'gemini-2.5-flash-lite'
  keyword_extraction_agent: 'gemini-2.5-flash-lite'

# 3. Parâmetros de Pesquisa e Automação
research_parameters:
  deep_research_max_searches: 100
  scheduled_curation:
    enabled: true
    schedule: "0 5 * * *" # Todo dia às 5:00 AM
    max_duration_minutes: 60
  conflict_review_days: 90

# 4. Configuração dos Serviços de Backend
services:
  neo4j_knowledge:
    uri: "bolt://localhost:7687"
    user: "neo4j"
    password: "${NEO4J_PASSWORD}"
  
  neo4j_memory_agents:
    uri: "bolt://localhost:7687"
    user: "neo4j"
    password: "${NEO4J_PASSWORD}"

  minio_s3:
    endpoint: "localhost:9000"
    access_key: "${MINIO_ACCESS_KEY}"
    secret_key: "${MINIO_SECRET_KEY}"
    bucket_name: "pro-vida-articles"

  vector_db:
    provider: "chromadb"
    path: "./chroma_db"

---
# requirements.txt
# Lista de dependências Python para o projeto

google-generativeai
langgraph
google-cloud-aiplatform
python-dotenv
pyyaml
neo4j
minio
chromadb
docker
requests
beautifulsoup4
pypdf2
rich # Para uma CLI mais bonita

---
# .env.example
# Exemplo de arquivo de variáveis de ambiente.
# Copie este arquivo para .env e preencha com suas credenciais.

# Chave de API para os modelos do Google Gemini
GOOGLE_API_KEY="AIzaSy...sua_chave_aqui"

# Credenciais para o banco de dados Neo4j
NEO4J_PASSWORD="sua_senha_forte_aqui"

# Credenciais para o MinIO S3
MINIO_ROOT_USER="minioadmin"
MINIO_ROOT_PASSWORD="sua_senha_forte_aqui"

---
# docker-compose.yml
# Arquivo para orquestrar os serviços de backend com Docker

version: '3.8'

services:
  neo4j:
    image: neo4j:5
    container_name: pro_vida_neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./neo4j/data:/data
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: pro_vida_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    restart: unless-stopped

---
# main.py (Estrutura Conceitual)
# Ponto de entrada principal da aplicação CLI

import argparse
import yaml
from rich.console import Console

# (Aqui viriam os imports dos módulos de agentes, orquestrador, etc.)
# from pro_vida.orchestrator import DeepResearchOrchestrator
# from pro_vida.query_handler import FastQueryHandler

def load_config():
    """Carrega as configurações do arquivo config.yaml."""
    with open('config.yaml', 'r') as f:
        return yaml.safe_load(f)

def main():
    """Função principal que gerencia a CLI."""
    console = Console()
    config = load_config()

    parser = argparse.ArgumentParser(description="Pró-Vida: Assistente de Pesquisa Autônomo.")
    parser.add_argument('--mode', required=True, choices=['fast-query', 'deep-research'], help="Modo de operação.")
    parser.add_argument('--query', help="A pergunta para o modo 'fast-query'.")
    parser.add_argument('--topic', help="O tópico para o modo 'deep-research'.")

    args = parser.parse_args()

    console.print("[bold green]Iniciando o sistema Pró-Vida...[/bold green]")

    if args.mode == 'fast-query':
        if not args.query:
            console.print("[bold red]Erro: O modo 'fast-query' requer o argumento --query.[/bold red]")
            return
        # handler = FastQueryHandler(config)
        # response = handler.execute(args.query)
        # console.print(response)
        console.print(f"Executando Consulta Rápida para: '{args.query}'")


    elif args.mode == 'deep-research':
        if not args.topic:
            console.print("[bold red]Erro: O modo 'deep-research' requer o argumento --topic.[/bold red]")
            return
        # orchestrator = DeepResearchOrchestrator(config)
        # orchestrator.run(args.topic)
        console.print(f"Iniciando Pesquisa Profunda sobre: '{args.topic}'")

    console.print("[bold green]Operação concluída.[/bold green]")

if __name__ == "__main__":
    main()
